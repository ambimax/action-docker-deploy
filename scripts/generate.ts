import fs from "fs";
import YAML from "yaml";

const rootDir = `${__dirname}/..`;
const srcDir = `${rootDir}/src`;

const action = YAML.parse(fs.readFileSync(`${rootDir}/action.yml`).toString());

generateCode();
generateReadme();

function generateCode(): void {
    let code = `// This file was autogenerated.

    import * as core from "@actions/core";
    
    export interface InputParameters {`;

    for (const name in action.inputs) {
        const input = action.inputs[name];

        code += `
        /**
         * ${input.description}
         */
        ${name}${
            input.required || input.default !== undefined ? "" : "?"
        }: string;`;
    }

    code += `
    }
    
    export function getInputParameters(): InputParameters {
        return {`;

    for (const name in action.inputs) {
        const input = action.inputs[name];

        code += `
            ${name}: core.getInput(${JSON.stringify(
            name,
        )}, { required: ${!!input.required} }) || ${JSON.stringify(
            input.default,
        )},`;
    }

    code += `
        };
    }
    `;

    fs.writeFileSync(`${srcDir}/autogen.ts`, code);
}

function generateReadme(): void {
    let readme = fs.readFileSync(`${rootDir}/README.md`).toString();

    readme = replaceMarkdownRegion(
        readme,
        "parameters",
        `| Name | description | required | default |
|-|-|-|-|
${Object.keys(action.inputs)
    .map(
        key =>
            `| ${key} | ${action.inputs[key].description.replace(
                /\n/g,
                "<br>",
            )} | ${!!action.inputs[key].required} | ${action.inputs[key]
                .default ?? ""} |`,
    )
    .join("\n")}`,
    );

    const testDir = `${__dirname}/../test`;
    const tests = fs.readdirSync(testDir);

    readme = replaceMarkdownRegion(
        readme,
        "examples",
        tests
            .map(test => {
                const inputs = YAML.parse(
                    fs.readFileSync(`${testDir}/${test}/inputs.yml`).toString(),
                );

                return `### [${test.slice(3)}](test/${test})

${inputs.description}

\`\`\`yml
${YAML.stringify({
    jobs: {
        test: {
            steps: [
                Object.assign(
                    {
                        uses: "ambimax/action-docker-build@v2",
                    },
                    ...(Object.keys(inputs.with).length > 0
                        ? [{ with: inputs.with }]
                        : []),
                    ...(inputs.env && Object.keys(inputs.env).length > 0
                        ? [
                              {
                                  env: inputs.env,
                              },
                          ]
                        : []),
                ),
            ],
        },
    },
}).slice(25, -1)}
\`\`\``;
            })
            .join("\n\n"),
    );

    fs.writeFileSync(`${rootDir}/README.md`, readme);
}

/**
 * Replaces a region in a markdown file.
 *
 * @param input The input to replace the region in.
 * @param name The name of the region.
 * @param value The value to set the region to.
 *
 * @example const input = `
 *          # Hello world
 *          <!-- region:helloworld start -->
 *          <!-- region:helloworld end -->
 *          This is just an example.
 *          `;
 *
 *          const output = replaceMarkdownRegion(input, "helloworld", "Hello!");
 *
 *          const expectedOutput = `
 *          # Hello world
 *          <!-- region:helloworld start -->
 *          Hello!
 *          <!-- region:helloworld end -->
 *          This is just an example.
 *          `;
 */
function replaceMarkdownRegion(
    input: string,
    name: string,
    value: string,
): string {
    const startMatch = new RegExp(
        `<!--\\s+region:${name}\\s+start\\s+-->`,
    ).exec(input);
    const start = startMatch
        ? startMatch.index + startMatch[0].length
        : undefined;

    const endMatch = new RegExp(`<!--\\s+region:${name}\\s+end\\s+-->`).exec(
        input,
    );
    const end = endMatch?.index;

    if (!start || !end) {
        return input;
    }

    if (start > end) {
        throw new Error(`Markdown region ${name} ends before it starts.`);
    }

    return input.slice(0, start) + `\n${value}\n` + input.slice(end);
}
